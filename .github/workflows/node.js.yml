name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - run: npm ci  # Install dependencies
    - run: npm run build --if-present  # Build the app

    # Check if the build directory exists
    - run: ls -la ./dist

    # Step 1: Configure AWS CLI (before whitelisting IP)
    - name: Configure AWS CLI
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        echo "[default]" > ~/.aws/config
        echo "region = ${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config

    # Step 2: Fetch the public IP of the GitHub Actions runner
    - name: Get public IP of GitHub Actions runner
      id: get_ip
      run: echo "ip=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    # Step 3: Whitelist the GitHub Actions runner IP in the security group
    - name: Whitelist runner IP in security group
      run: |
        IP=${{ env.ip }}
        # Add the inbound rule to allow SSH (port 22) from the GitHub Actions runner's IP
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${IP}/32

    # Step 4: Setup SSH using username and password
    - name: Setup SSH for EC2 Deployment (Using Username/Password/Port)
      run: |
        # SSH username and password login with port
        # This assumes you have the password set in GitHub Secrets
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} "echo SSH login successful"
        
    # Step 5: Ensure /var/www/html/ has correct permissions
    - name: Ensure /var/www/html/ has correct permissions
      run: |
        # Ensure correct ownership and permissions using SSH username/password login
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} 'sudo chown -R ubuntu:ubuntu /var/www/html/'
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} 'sudo chmod -R 775 /var/www/html/'

    # Step 6: Clear contents of /var/www/html
    - name: Clear contents of /var/www/html
      run: |
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} 'sudo rm -rf /var/www/html/*'

    # Step 7: Copy dist folder to /var/www/html
    - name: Copy dist folder to /var/www/html
      run: |
        # Ensure the build directory is there
        ls -la ./dist  # Double-check for the build directory
        
        # Rsync build files to EC2 instance
        rsync -avz --delete ./dist/ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }}:/var/www/html/

    # Step 8: Restart Nginx on EC2
    - name: Restart Nginx on EC2
      run: |
        sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} 'sudo systemctl restart nginx'

    # Step 9: Revoke runner IP from security group
    - name: Revoke runner IP from security group
      run: |
        IP=${{ env.ip }}
        # Remove the inbound rule allowing SSH from the GitHub Actions runner's IP
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${IP}/32
          
    - name: Clean up AWS credentials
      run: rm -rf ~/.aws

    - name: Clean up SSH keys
      run: rm -rf ~/.ssh

    - name: Deployment complete message
      run: echo "Deployment Completed. Please check the deployed changes on the server!"
